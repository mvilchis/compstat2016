{
    "collab_server" : "",
    "contents" : "# Nos ubicamos en el directorio de trabajo donde tenemos los correos ejemplo\nsetwd(\"~/Documents/cursos ITAM/Machine Learning/prácticas\")\n\n# Creamos variables con los directorios donde se encuentran los datos\ntrayectoria_spam     <- file.path(\"data\", \"spam_2\")\ntrayectoria_easyham  <- file.path(\"data\", \"easy_ham_2\")\ntrayectoria_hardham  <- file.path(\"data\", \"hard_ham\")\n\n# Leemos el directorio donde se encuentran los correos clasificados como spam\narchivos_correos_spam <- dir(trayectoria_spam)\n\n# quitamos el guión llamado cmds\narchivos_correos_spam <- archivos_correos_spam[which(archivos_correos_spam!=\"cmds\")] #[1:250]\n\n# hacemos una función que leea el mensaje del archivo que se le pase como parámetro\n# asumimos que el archivo contiene un correo\n\nlee_mensaje <- function(correo) {\n  fd <- file(correo, open = \"rt\")\n  lineas <- readLines(fd)\n  close(fd)\n  mensaje <- lineas[seq(which(lineas == \"\")[1] + 1, length(lineas), 1)]\n  return (paste(mensaje, collapse = \"\\n\"))\n}\n\ntodo_spam <- sapply(archivos_correos_spam,\n                   function(p) lee_mensaje(file.path(trayectoria_spam, p)))\n\nlibrary('tm')\n\nobtiene_TermDocumentMatrix <- function (vector_correos) {\n  control <- list(stopwords = TRUE,\n                removePunctuation = TRUE,\n                removeNumbers = TRUE,\n                minDocFreq = 2)\n  corpus <- Corpus(VectorSource(vector_correos))\n  return(TermDocumentMatrix(corpus, control))\n}\n\nspam_TDM <- obtiene_TermDocumentMatrix(todo_spam)\n\n# Crea un data frame que provee el conjunto de caracteristicas de los datos de entrenamiento SPAM\nmatriz_spam <- as.matrix(spam_TDM)\n\nconteos_spam <- rowSums(matriz_spam)\ndf_spam <- data.frame(cbind(names(conteos_spam),\n                            as.numeric(conteos_spam)),\n                      stringsAsFactors = FALSE)\nnames(df_spam) <- c(\"terminos\", \"frecuencia\")\ndf_spam$frecuencia <- as.numeric(df_spam$frecuencia)\nocurrencias_spam <- sapply(1:nrow(matriz_spam),\n                          function(i) # Obtiene la proporcion de documentos que contiene cada palabra\n                          {\n                            length(which(matriz_spam[i, ] > 0)) / ncol(matriz_spam)\n                          })\ndensidad_spam <- df_spam$frecuencia/sum(df_spam$frecuencia,na.rm = TRUE)\n\ndf_spam <- transform(df_spam,\n                     densidad = densidad_spam,\n                     ocurrencias = ocurrencias_spam)\n\n\n# Leemos el directorio donde se encuentran los correos clasificados como ham fácilmente identificables\narchivos_correos_easy_ham <- dir(trayectoria_easyham)\n\n# quitamos el guión llamado cmds\narchivos_correos_easy_ham <- archivos_correos_easy_ham[which(archivos_correos_easy_ham!=\"cmds\")] #[1:250]\n\ntodo_easy_ham <- sapply(archivos_correos_easy_ham,\n                    function(p) lee_mensaje(file.path(trayectoria_easyham, p)))\n\neasy_ham_TDM <- obtiene_TermDocumentMatrix(todo_easy_ham)\n\n# Crea un data frame que provee el conjunto de caracteristicas de los datos de entrenamiento easy ham\nmatriz_easy_ham <- as.matrix(easy_ham_TDM)\n\nconteos_easy_ham <- rowSums(matriz_easy_ham)\ndf_easy_ham <- data.frame(cbind(names(conteos_easy_ham),\n                            as.numeric(conteos_easy_ham)),\n                      stringsAsFactors = FALSE)\nnames(df_easy_ham) <- c(\"terminos\", \"frecuencia\")\ndf_easy_ham$frecuencia <- as.numeric(df_easy_ham$frecuencia)\nocurrencias_easy_ham <- sapply(1:nrow(matriz_easy_ham),\n                           function(i) # Obtiene la proporcion de documentos que contiene cada palabra\n                           {\n                             length(which(matriz_easy_ham[i, ] > 0)) / ncol(matriz_easy_ham)\n                           })\ndensidad_easy_ham <- df_easy_ham$frecuencia/sum(df_easy_ham$frecuencia,na.rm = TRUE)\n\ndf_easy_ham <- transform(df_easy_ham,\n                     densidad = densidad_easy_ham,\n                     ocurrencias = ocurrencias_easy_ham)\n\nclasifica_correo <- function(trayectoria, df_entrenamiento, a_priori = 0.5, c = 1e-6)\n{\n  mensaje <- lee_mensaje(trayectoria)\n  mensaje_TDM <- obtiene_TermDocumentMatrix(mensaje)\n  conteos_mensaje <- rowSums(as.matrix(mensaje_TDM))\n\n  # Encuentra palabras en data frame de entrenamiento\n  mensaje_palabras_comunes <- intersect(names(conteos_mensaje), df_entrenamiento$terminos)\n  \n  # Ahora sólo aplicamos la clasificación Bayes ingenuo\n  if(length(mensaje_palabras_comunes) < 1)\n  {\n    #return(a_priori * c ^ (length(conteos_mensaje)))\n    return(log(a_priori) + (length(conteos_mensaje)) *log(c))\n  }\n  else\n  {\n    probabilidades_palabras_comunes <- df_entrenamiento$densidad[match(mensaje_palabras_comunes, df_entrenamiento$terminos)]\n    #return(a_priori * prod(probabilidades_palabras_comunes) * c ^ (length(conteos_mensaje) - length(mensaje_palabras_comunes)))\n    return(log(a_priori) + sum(log(probabilidades_palabras_comunes)) + log(c) * (length(conteos_mensaje) - length(mensaje_palabras_comunes)))\n  }\n}\n\n\n# Leemos el directorio donde se encuentran los correos clasificados como ham dificlmente identificables\narchivos_correos_hard_ham <- dir(trayectoria_hardham)\n\n# quitamos el guión llamado cmds\narchivos_correos_hard_ham <- archivos_correos_hard_ham[which(archivos_correos_hard_ham!=\"cmds\")]\n\nclasifica_spam <- function(trayectoria, archivos) {\n\n  hard_ham_spam_prueba <- sapply(archivos,\n                             function(p) clasifica_correo(file.path(trayectoria, p), df_entrenamiento = df_spam))\n  hard_ham_ham_prueba <- sapply(archivos,\n                            function(p) clasifica_correo(file.path(trayectoria, p), df_entrenamiento = df_easy_ham))\n  \n  return (ifelse(hard_ham_spam_prueba > hard_ham_ham_prueba,\n                        TRUE,\n                        FALSE))\n}\n\nhard_ham_res <- clasifica_spam(trayectoria_hardham, archivos_correos_hard_ham)\neasy_ham_res <- clasifica_spam(trayectoria_easyham, archivos_correos_easy_ham)\nspam_res <- clasifica_spam(trayectoria_spam, archivos_correos_spam)\n\nsummary(hard_ham_res)\nsummary(easy_ham_res)\nsummary(spam_res)\n\n",
    "created" : 1472075755875.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1528754969",
    "id" : "95553DDF",
    "lastKnownWriteTime" : 1471353477,
    "last_content_update" : 1471353477,
    "path" : "C:/Users/Admin/Desktop/bayes ingenuo/bayes_ingenuo_clasificador.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}